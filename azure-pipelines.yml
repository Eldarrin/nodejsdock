# Node.js

# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

resources:
  - repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '591568c9-fdc7-46e6-a1f2-0533e1ac1686'
  imageRepository: 'ustpoc-docker.jfrog.io/deepsea'
  containerRegistry: 'zulucontainerregistry.azurecr.io'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'zulucontainerregistry6327d626-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Import
  displayName: Import Requirements
  jobs:
    - job: Import
      displayName: Import
      steps:
        - task: ArtifactoryNpm@1
          displayName: Install NPM from Artifactory
          inputs:
            command: 'install'
            artifactoryService: 'jFrog'
            sourceRepo: 'npm'
            workingFolder: '$(System.DefaultWorkingDirectory)'
            collectBuildInfo: true
            threads: '1'
            buildName: '$(Build.DefinitionName)'
            buildNumber: '$(Build.BuildNumber)'
            includeEnvVars: true

        - task: ArtifactoryToolsInstaller@1
          inputs:
            artifactoryService: 'jFrog'
            cliInstallationRepo: 'jfrog-cli'



- stage: Check
  displayName: Check Stage
  jobs:
    - job: Check
      displayName: Check
      steps:
        - task: SonarQubePrepare@4
          inputs:
            SonarQube: 'SonarCloudEld'
            scannerMode: 'CLI'
            configMode: 'manual'
            cliProjectKey: 'Eldarrin_nodejsdock'
            cliProjectName: 'nodejsdock'
            cliSources: '.'
            extraProperties: |
              # Additional properties that will be passed to the scanner,
              # Put one key=value per line, example:
              sonar.organization=eldarrin-github

        - task: SonarQubeAnalyze@4

        - task: SonarQubePublish@4
          inputs:
            pollingTimeoutSec: '300'

        - script: |
            npm test
            npm run-script build
          displayName: 'npm test and build'

- stage: Build
  displayName: Build Stage
  dependsOn: Check
  jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:


#        - task: ArtifactoryDocker@1
#          inputs:
#            command: 'pull'
#            artifactoryService: 'jFrog'
#            sourceRepo: 'docker'
#            imageName: 'ustpoc-docker.jfrog.io/centos'
#            collectBuildInfo: true
#            buildName: '$(Build.DefinitionName)'
#            buildNumber: '$(Build.BuildNumber)'
#            includeEnvVars: true

#        - task: Docker@2
#          inputs:
#            containerRegistry: $(dockerRegistryServiceConnection)
#            repository: $(imageRepository)
#            command: 'build'
#            Dockerfile: '$(dockerfilePath)'
#            tags: '$(tag)'

#        - task: UniversalPackages@0
#          inputs:
#            command: 'download'
#            downloadDirectory: '$(System.DefaultWorkingDirectory)'
#            feedsToUse: 'internal'
#            vstsFeed: '1b6067da-0716-4122-a207-73565ab42845'
#            vstsFeedPackage: 'f864f7d9-3fd7-4789-869e-1258818e3530'
#            vstsPackageVersion: '19.7.363'

#        - task: CmdLine@2
#          inputs:
#            script: |
#              sudo mv $(System.DefaultWorkingDirectory)/C:/twistlock_19_07_363/linux/twistcli /usr/bin/twistcli
#              sudo chmod +x /usr/bin/twistcli

#        - task: twistcli-scan@1
#          inputs:
#            scanType: 'images'
#            twistlockService: 'twistlock_cli'
#            vulnerabilityThreshold: 'critical'
#            onlyFixed: false
#            gracePeriod: '0'
#            complianceThreshold: 'critical'
#            artifact: '$(imageRepository):$(tag)'

#        - task: Docker@2
#          inputs:
#            containerRegistry: $(dockerRegistryServiceConnection)
#            repository: '$(imageRepository)'
#            command: 'push'
#            tags: '$(tag)'

        - upload: manifests
          artifact: manifests

        - task: CmdLine@2
          inputs:
            script: |
              sudo ls
              sudo docker images

#        - task: ArtifactoryDocker@1
#          inputs:
#            command: 'push'
#            artifactoryService: 'jFrog'
#            targetRepo: 'docker-local'
#            imageName: '$(imageRepository):$(tag)'
#            collectBuildInfo: true
#            buildName: '$(Build.DefinitionName)'
#            buildNumber: '$(Build.BuildNumber)'
#            includeEnvVars: true
        